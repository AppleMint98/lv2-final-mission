name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  Continuous-Deployment:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted

    steps:
      - name: Deploy to Server
        run: |
          # Docker Hub에서 최신 이미지를 받아옵니다.
          # 이미지는 public으로 가정합니다. private일 경우 docker login이 필요합니다.
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/final-mission:latest

          # 기존에 실행 중인 컨테이너가 있다면 중지하고 삭제합니다.
          # || true를 붙여서 컨테이너가 없는 첫 배포 시 에러가 나지 않도록 합니다.
          docker stop my-app-container || true
          docker rm my-app-container || true

          # 새로운 컨테이너를 실행합니다.
          # -d: 백그라운드 실행
          # -p 8080:8080: 호스트의 8080 포트와 컨테이너의 8080 포트를 연결
          # --name: 컨테이너에 고정된 이름을 부여하여 관리하기 쉽게 만듭니다.
          docker run -d -p 8080:8080 --name my-app-container ${{ secrets.DOCKERHUB_USERNAME }}/final-mission:latest
